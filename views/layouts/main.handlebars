<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <!-- Tell the browser to be responsive to screen width -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
    <!-- Favicon icon -->
    <link rel="icon" type="image/png" sizes="16x16" href="/assets/images/favicon.png">
    <title>School Gate</title>
    <style>
        * {
        margin: 0;
        padding: 0;
        border: 0;
        outline: 0;
        font-size: 100%;
        vertical-align: baseline;
        background: transparent;
    }
    </style>
    <!-- Bootstrap Core CSS -->
    <link rel="stylesheet" href="/assets/plugins/bootstrap/css/bootstrap.min.css">
    <link href="/assets/plugins/calendar/dist/fullcalendar.css" rel="stylesheet" />
     <!-- wysihtml5 CSS -->
    <link rel="stylesheet" href="/assets/plugins/html5-editor/bootstrap-wysihtml5.css" />
    <!-- Dropzone css -->
    <link href="/assets/plugins/dropzone-master/dist/dropzone.css" rel="stylesheet" type="text/css" />
    <!-- Custom CSS -->
    <link href="/css/style.css" rel="stylesheet">
    
    <!--alerts CSS -->
    <!--<link href="../assets/plugins/wizard/steps.css" rel="stylesheet">-->
    <link href="/assets/plugins/sweetalert/sweetalert.css" rel="stylesheet" type="text/css">
    <!-- You can change the theme colors from here -->
    <link href="/css/colors/green-dark.css" id="theme" rel="stylesheet">
    <link href="/assets/plugins/icheck/skins/all.css" rel="stylesheet">
        <style>
              /* Appearance */
               </style>

    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
    <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
<![endif]-->
     <script>
        function setSchName(schoolName) {
            schoolName = document.getElementById(schoolName).id;
            console.log("Schoolname: " + schoolName);
            document.getElementById('schoolInfoTextbox').value = schoolName;
        }
        var counter = 0;
        var counterButton = 0;
        function showProfanities() {
            console.log("loading profanities");
            //var x = "{{Profanities.profanities}}"
            var profanity = "{{Profanities.profanities}}".split(",");
            console.log(profanity);
            profanity.forEach(function (element) {
                if (element == '') {
                    return;
                }// check for empty elements in the DB and if there is skip current iteration
                var profListItem = document.createElement("Li");
                profListItem.className = "list-group-item d-flex justify-content-between align-items-center";
                profListItem.setAttribute("id", 'profanityListItem' + counter++);
                profListItem.style.color = 'white';
                profListItem.innerText = element;
                var profListItemButton = document.createElement("Button");
                profListItemButton.type = "button";
                profListItemButton.className = "close";
                profListItemButton.setAttribute("id", 'profanityListButton' + counterButton++);
                profListItemButton.setAttribute('onclick', "removeProf(this.id)");
                profListItemButton.setAttribute('aria-label', "Close");
                var profListItemButtonSpan = document.createElement("Span");
                profListItemButtonSpan.setAttribute('aria-hidden', 'true');
                profListItemButtonSpan.innerHTML = '&times;';
                profListItemButton.appendChild(profListItemButtonSpan);
                profListItem.appendChild(profListItemButton);
                document.getElementById("profList").appendChild(profListItem);
            });
        }
        /*function showDeletedSchools() {
            var schoolInfoObject = {{ SchoolInfo }}
        var count = 0;
        schoolInfoObject.forEach(function (element) {
            var InfoTab = document.createElement("Li");
            InfoTab.className = "nav-item";
            var InfoTabA = document.createElement("a");
            InfoTabA.className = "nav-link";
            profListItem.setAttribute("data-toggle", 'tab');
             profListItem.setAttribute("role", 'tab');
             profListItem.setAttribute("href", element.schoolname2);
        });
        }*/
        function showFaculty(Faculty) {
            console.log("loading Faculty ");
            var faculty = Faculty.split(",");
            console.log(faculty);
            faculty.forEach(function (element) {
                if (element == '') {
                    return;
                }// check for empty elements in the DB and if there is skip current iteration
                var profListItem = document.createElement("h5");
                profListItem.innerText = element;
                profListItem.value = element;
                profListItem.id = element;
                profListItem.style.textDecoration = "none";
                document.getElementById("Faculty2").appendChild(profListItem);
            });
        }
        function appendProfanity(profAdd) {
            var profToAdd = document.getElementById(profAdd).value;
            var currentlist = "{{Profanities.profanities}}".split(",");
            var isAlreadyInList = false;
            for (var x = 0; x < currentlist.length; x++) {
                if (currentlist[x] == profToAdd) {
                    isAlreadyInList = true;
                }
            }
            if (isAlreadyInList) {
                document.getElementById("errorMsgProf").innerHTML = "<br>This word is already in the filter! Unable to submit duplicate word: " + profToAdd;
                document.getElementById("errorMsgProf").style.display = "inline";
            }
            else {
                if (profToAdd == "") {
                    document.getElementById("errorMsgProf").innerHTML = "<br>Please enter something into the textbox";
                    document.getElementById("errorMsgProf").style.display = "inline";
                }
                else {
                    addProfanities(profToAdd);
                    profToAdd = "," + profToAdd;
                    var CurrentProfanities = document.getElementById('Profanities').value;
                    CurrentProfanities += profToAdd;
                    document.getElementById('Profanities').value = CurrentProfanities;
                    document.getElementById("errorMsgProf").style.display = "none";
                }
                document.getElementById('ProfanitiesAdd').value = "";
            }
        }
        function addProfanities(profanityValue) {
            var profListItem = document.createElement("Li");
            profListItem.className = "list-group-item d-flex justify-content-between align-items-center";
            profListItem.setAttribute("id", 'profanityListItem' + counter++);
            profListItem.style.color = 'white';
            profListItem.innerText = profanityValue;
            var profListItemButton = document.createElement("Button");
            profListItemButton.type = "button";
            profListItemButton.className = "close";
            var buttonID = 'profanityListButton' + counterButton;
            profListItemButton.setAttribute("id", 'profanityListButton' + counterButton++);
            profListItemButton.setAttribute('aria-label', "Close");
            profListItemButton.setAttribute('onclick', "removeProf(this.id)");
            var profListItemButtonSpan = document.createElement("Span");
            profListItemButtonSpan.setAttribute('aria-hidden', 'true');
            profListItemButtonSpan.innerHTML = '&times;';
            profListItemButton.appendChild(profListItemButtonSpan);
            profListItem.appendChild(profListItemButton);
            document.getElementById("profList").appendChild(profListItem);
        }
        function removeProf(buttonID) {
            var extractNumber = buttonID.replace(/^\D+/g, '');
            console.log(extractNumber);
            var DeleteProfListItem = 'profanityListItem' + extractNumber;
            var itemToDelete = document.getElementById(DeleteProfListItem).childNodes[0].nodeValue;
            var totalProfsStr = "";
            var totalProfs = document.getElementById('Profanities').value;
            totalProfs = totalProfs.split(",");
            console.log(totalProfs);
            totalProfs.forEach(function (x, index) {
                if (x.toString() == itemToDelete.toString()) {
                    console.log(itemToDelete + ' not added');
                }
                else {
                    totalProfsStr += x + ",";
                }
            });
            totalProfsStr = totalProfsStr.slice(0, -1);
            document.getElementById('Profanities').value = totalProfsStr;
            document.getElementById(DeleteProfListItem).outerHTML = "";
        }
    </script>
    <script>
        function ProfanityDetector(htmlElement, buttonToDisable, errorMsg, errorMsg2) { // errorMsg contains the swear words
            console.log(document.getElementById(htmlElement).value);
            var foundProfanity = detectprofanities(htmlElement);
            var errorCheck = document.getElementById(errorMsg).innerText;
            if (foundProfanity != "") { // if found any profanities
                document.getElementById(buttonToDisable).disabled = "true";
                document.getElementById(buttonToDisable).innerText = "disabled";
                document.getElementById(errorMsg).style.display = "inline-block";
                document.getElementById(errorMsg2).style.display = "inline-block";
                /*if (errorCheck == "Profanity Detected: ") { // 1st words of errorMessage should be profanity detected for it to add 1st word
                    for (let i = 0; i < foundProfanity.length; i++) {
                        document.getElementById(errorMsg).innerText += " " + foundProfanity[i];
                        console.log("added(1st profanity)");
                    }
                }
                else { // already added 1st swear word, proceed to add the next words*/
                if (errorCheck.substring(errorCheck.length - 1) == ",") {
                    errorCheck = errorCheck.substring(0, errorCheck.length - 1);
                }// check if last index is comma ( had issues with commas appearing on back of words not sure why)
                errorCheck = errorCheck.replace("Profanity Detected: ", " ");
                errorCheck = errorCheck.toLowerCase();
                errorCheck = errorCheck.split(" ");
                errorCheck = errorCheck.filter(function (el) {
                    return el != "";
                });// check for empty indexes in existing error messages ( the method i used leaves empty indexes sometimes)
                errorCheck = errorCheck.toString();
                //errorCheck = errorCheck.replace(", ", " ");
                console.log(foundProfanity + " comparison1");
                console.log(errorCheck + " comparison2"); // log for comparison when bug fixing
                //var foundErrorCheck = errorCheck.filter(el => foundProfanity.includes(el));
                if (errorCheck.toString() == foundProfanity.toString()) { // check if all words are already existing duplicates
                    //pass
                    console.log("passed");
                }
                else { // check for existing profanities and filter them out so that there are no duplicate words
                    var newProfanities = foundProfanity.filter(n => !errorCheck.includes(n));
                    console.log(newProfanities + "new profs");
                    document.getElementById(errorMsg).innerText += " " + newProfanities;
                    console.log("added" + foundProfanity);
                    /*for (let i = 0; i < foundProfanity.length; i++) {
                        for (let x = 0; x < foundErrorCheck.length; x++) {
                            if (foundProfanity[i] == foundErrorCheck[x]) {
                                console.log("not added");
                            }
                            else {
                                document.getElementById(errorMsg).innerText += " " + foundProfanity[i] + ",";
                                console.log("added");
                            }
                        }
                    }*/
                }

            }
            /*for(let i = 0; i < errorCheck.length; i++){
                errorCheck[i]
            }
            if (foundProfanity != "") {
                document.getElementById(buttonToDisable).disabled = "true";
                document.getElementById(buttonToDisable).innerText = "disabled";
                document.getElementById(errorMsg0).style.display = "inline";
                document.getElementById(errorMsg).style.display = "inline";
                if (errorCheck == " ") {
                    for (let x = 0; x < foundProfanity.length; x++) {
                        document.getElementById(errorMsg).innerText += (" " + foundProfanity[x] + ", ");
                        console.log("This should only occur once. If this occurs more than once an error occured.")
                    }
                }
                else {
                    for (let i = 0; i < errorCheck.length; i++) {
                        console.log(errorCheck[i].replace(",", "") + " 1")
                        for (let x = 0; x < foundProfanity.length; x++) {
                            console.log(errorCheck[i].replace(",", " ") + " 2 " + foundProfanity[x])
                            if (errorCheck[i].replace(",", "") == foundProfanity[x]) {
                                //pass
                            }
                            else if (errorCheck[i].replace(",", "") != foundProfanity[x]) {
                                document.getElementById(errorMsg).innerText += (" " + foundProfanity[x] + ", ");
                            }// check if profanity already exist in error box
                        }
                    }
                }
            }
            else if (errorCheck.filter(el => profanity.includes(el)) != "") {
                //pass
            }
            else {
                document.getElementById(buttonToDisable).disabled = "true";
                document.getElementById(buttonToDisable).innerText = "submit";
                document.getElementById(errorMsg).style.display = "none";
            }*/
        }
        function isThereAnyWords(htmlElement, htmlElement2, buttonToDisable) {
            if (document.getElementById(htmlElement).value == "" || document.getElementById(htmlElement2).value == "") {
                document.getElementById(buttonToDisable).disabled = "true";
                document.getElementById(buttonToDisable).innerText = "disabled";
            }
            else {
                document.getElementById(buttonToDisable).removeAttribute("disabled");
                document.getElementById(buttonToDisable).innerText = "submit";
            }
        }
        function isThereAnyWords_RS(htmlElement, buttonToDisable) {
            if (document.getElementById(htmlElement).value == "") {
                document.getElementById(buttonToDisable).disabled = "true";
                document.getElementById(buttonToDisable).innerText = "Recover";
            }
            else {
                document.getElementById(buttonToDisable).removeAttribute("disabled");
                document.getElementById(buttonToDisable).innerText = "Recover";
            }
        }
        function anyProfanitiesLeft(htmlElement, htmlElement2, htmlElement3, htmlElement4, buttonToDisable, errorMsg, errorMsg2) {
            var foundProfanity = detectprofanities(htmlElement);
            var foundProfanity2 = detectprofanities(htmlElement2);
            var foundProfanity3 = detectprofanities(htmlElement3);
            var foundProfanity4 = detectprofanities(htmlElement4);
            if (foundProfanity == "" && foundProfanity2 == "" && foundProfanity3 == "" && foundProfanity4 == "") {
                console.log("unlocked button");// check if any of the 4 input has any profanities remaining
                document.getElementById(buttonToDisable).removeAttribute("disabled");
                document.getElementById(buttonToDisable).innerText = "submit";
                document.getElementById(errorMsg).style.display = "none";
                document.getElementById(errorMsg).innerHTML = "";
                document.getElementById(errorMsg2).style.display = "none";
            }
            else {
                console.log("button not unlocked");
            }
        }
        function detectprofanities(htmlElement) {
            var textInput = document.getElementById(htmlElement).value;
            textInput = textInput.toLowerCase();
            var arr = textInput.split(" ");
            var profanity = "{{Profanities.profanities}}".split(",");
            console.log(profanity);
            var foundProfanity = arr.filter(el => profanity.includes(el));
            return foundProfanity;
        }
    </script>
            <style>
            p{
                color: #FFFFFF;
        }
        a{
            color: #FFFFFF !important;
        }
        input{
            color: #FFFFFF !important;
        }
        label{
            color: #FFFFFF !important;
        }
        textarea{
            color: #FFFFFF !important;
        }
        h1{
            color: #FFFFFF !important;
        }
        h2{
            color: #FFFFFF !important;
        }
        h3{
            color: #FFFFFF !important;
        }
        h4{
            color: #FFFFFF !important;
        }
        h5{
            color: #FFFFFF !important;
        }
        body{
            color: #FFFFFF !important;
        }
    </style>
</head>
<body onload="getUsername('{{user.username}}');">

    {{> _navbar }}

	<div class="bg-dark">
        
        {{> _flashmsg}}

        {{> _msg}}

        {{> _errors}}
       

		{{{body}}}
	</div>

    <footer class="footer" style="background-color: #383f48;">
               This website loving created by the School Gate team &#60;3 <i class="fa fa-heart"></i>
    </footer>

	<!-- Optional JavaScript -->
	<!-- jQuery first, then Popper.js, then Bootstrap JS -->
	<!-- All Jquery -->
    <!-- ============================================================== -->
    <script src="/assets/plugins/jquery/jquery.min.js"></script>
    <!-- Bootstrap tether Core JavaScript -->
    <script src="/assets/plugins/popper/popper.min.js"></script>
    <script src="/assets/plugins/bootstrap/js/bootstrap.min.js"></script>
    <!-- slimscrollbar scrollbar JavaScript -->
    <script src="/js/jquery.slimscroll.js"></script>
    <!--Wave Effects -->
    <script src="/js/waves.js"></script>
    <!--Menu sidebar -->
    <script src="/js/sidebarmenu.js"></script>
    <!--stickey kit -->
    <script src="/assets/plugins/sticky-kit-master/dist/sticky-kit.min.js"></script>
    <script src="/assets/plugins/sparkline/jquery.sparkline.min.js"></script>
    <!--Custom JavaScript -->
    <script src="/js/custom.min.js"></script>
    <script src="/js/main.js"></script>
    <script src="/js/socket.io.js"></script>
    <script src="/js/custom.js"></script>
    <script src="/assets/plugins/knob/jquery.knob.js"></script>
    <!-- ============================================================== -->
    <!-- CDN -->
	<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
	<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
	<script src="https://cdn.jsdelivr.net/npm/bootstrap-confirmation2/dist/bootstrap-confirmation.min.js"></script> 
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tether/1.4.0/js/tether.min.js" integrity="sha384-DztdAPBWPRXSA/3eYEEUWrWCy7G5KFbe8fFjk5JAIxUYHKkDx6Qin1DkWx51bBrb" crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js" integrity="sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn" crossorigin="anonymous"></script>
    <!-- Sweet-Alert  -->
    <script src="/assets/plugins/sweetalert/sweetalert.min.js"></script>
    <script src="/assets/plugins/sweetalert/jquery.sweet-alert.custom.js"></script>   
    <!-- ============================================================== -->
    <!-- Style switcher -->
    <!-- ============================================================== -->
    <script src="/assets/plugins/styleswitcher/jQuery.style.switcher.js"></script>
    <!-- ============================================================== -->
    <!-- Calendar JavaScript -->
    <script src="/assets/plugins/calendar/jquery-ui.min.js"></script>
    <script src="/assets/plugins/moment/moment.js"></script>
    <script src='/assets/plugins/calendar/dist/fullcalendar.min.js'></script>
    <script src="/assets/plugins/calendar/dist/cal-init.js"></script>

    <script>
        $(function () {
            $('[data-plugin="knob"]').knob();
        });
    </script>
    <script>
        $('[data-toggle=confirmation]').confirmation({
            rootSelector: '[data-toggle=confirmation]',
        });
    </script>
    <script>
        $(".dial").knob({
            'change': function (v) { console.log(v); },
            draw: function () {
                $(this.i).val(this.cv + '%');
            }
        });
    </script>
    <!-- ============================================================== -->
    <!-- Style switcher -->
    <!-- ============================================================== -->
    <script src="/assets/plugins/styleswitcher/jQuery.style.switcher.js"></script>
    <script src="/assets/plugins/moment/moment.js"></script>
    <script src="/assets/plugins/sweetalert/jquery.sweet-alert.custom.js"></script>
    <script src="/assets/plugins/sweetalert/sweetalert.min.js"></script>
    <!--<script src="../assets/plugins/wizard/jquery.steps.min.js"></script>
        <script src="../assets/plugins/wizard/jquery.validate.min.js"></script>
        <script src="../assets/plugins/wizard/steps.js"></script>
        <script src="js/star-rating.js" type="text/javascript"></script>
        <script src="http://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>-->
    <script src="/assets/plugins/switchery/dist/switchery.min.js"></script>
    <script src="/assets/plugins/select2/dist/js/select2.full.min.js" type="text/javascript"></script>
    <script src="/assets/plugins/bootstrap-select/bootstrap-select.min.js" type="text/javascript"></script>
    <script src="/assets/plugins/icheck/icheck.min.js"></script>
    <script src="/assets/plugins/icheck/icheck.init.js"></script>
    <script>    $(function () {
            // Switchery
            var elems = Array.prototype.slice.call(document.querySelectorAll('.js-switch'));
            $('.js-switch').each(function () {
                new Switchery($(this)[0], $(this).data());
            });
            // For select 2
            $(".select2").select2();
            $('.selectpicker').selectpicker();
            //Bootstrap-TouchSpin
            $(".vertical-spin").TouchSpin({
                verticalbuttons: true
            });
            var vspinTrue = $(".vertical-spin").TouchSpin({
                verticalbuttons: true
            });
            if (vspinTrue) {
                $('.vertical-spin').prev('.bootstrap-touchspin-prefix').remove();
            }
            $("input[name='tch1']").TouchSpin({
                min: 0,
                max: 100,
                step: 0.1,
                decimals: 2,
                boostat: 5,
                maxboostedstep: 10,
                postfix: '%'
            });
            $("input[name='tch2']").TouchSpin({
                min: -1000000000,
                max: 1000000000,
                stepinterval: 50,
                maxboostedstep: 10000000,
                prefix: '$'
            });
            $("input[name='tch3']").TouchSpin();
            $("input[name='tch3_22']").TouchSpin({
                initval: 40
            });
            $("input[name='tch5']").TouchSpin({
                prefix: "pre",
                postfix: "post"
            });
            // For multiselect
            $('#pre-selected-options').multiSelect();
            $('#optgroup').multiSelect({
                selectableOptgroup: true
            });
            $('#public-methods').multiSelect();
            $('#select-all').click(function () {
                $('#public-methods').multiSelect('select_all');
                return false;
            });
            $('#deselect-all').click(function () {
                $('#public-methods').multiSelect('deselect_all');
                return false;
            });
            $('#refresh').on('click', function () {
                $('#public-methods').multiSelect('refresh');
                return false;
            });
            $('#add-option').on('click', function () {
                $('#public-methods').multiSelect('addOption', {
                    value: 42,
                    text: 'test 42',
                    index: 0
                });
                return false;
            });
            $(".ajax").select2({
                ajax: {
                    url: "https://api.github.com/search/repositories",
                    dataType: 'json',
                    delay: 250,
                    data: function (params) {
                        return {
                            q: params.term, // search term
                            page: params.page
                        };
                    },
                    processResults: function (data, params) {
                        // parse the results into the format expected by Select2
                        // since we are using custom formatting functions we do not need to
                        // alter the remote JSON data, except to indicate that infinite
                        // scrolling can be used
                        params.page = params.page || 1;
                        return {
                            results: data.items,
                            pagination: {
                                more: (params.page * 30) < data.total_count
                            }
                        };
                    },
                    cache: true
                },
                escapeMarkup: function (markup) {
                    return markup;
                }, // let our custom formatter work
                minimumInputLength: 1,
                //templateResult: formatRepo, // omitted for brevity, see the source of this page
                //templateSelection: formatRepoSelection // omitted for brevity, see the source of this page
            });
        });
                $(".stickyside").stick_in_parent({
            offset_top: 100
        });
        $('.stickyside a').click(function () {
            $('html, body').animate({
                scrollTop: $($(this).attr('href')).offset().top - 100
            }, 500);
            return false;
        });
        // This is auto select left sidebar
        // Cache selectors
        // Cache selectors
        var lastId,
            topMenu = $(".stickyside"),
            topMenuHeight = topMenu.outerHeight(),
            // All list items
            menuItems = topMenu.find("a"),
            // Anchors corresponding to menu items
            scrollItems = menuItems.map(function () {
                var item = $($(this).attr("href"));
                if (item.length) {
                    return item;
                }
            });

        // Bind click handler to menu items


        // Bind to scroll
        $(window).scroll(function () {
            // Get container scroll position
            var fromTop = $(this).scrollTop() + topMenuHeight + 570;

            // Get id of current scroll item
            var cur = scrollItems.map(function () {
                if ($(this).offset().top < fromTop)
                    return this;
            });
            // Get the id of the current element
            cur = cur[cur.length - 1];
            var id = cur && cur.length ? cur[0].id : "";

            if (lastId !== id) {
                lastId = id;
                // Set/remove active class
                menuItems
                    .removeClass("active")
                    .filter("[href='#" + id + "']").addClass("active");
            }
        });
    </script>
	<script>
        $(document).ready(function () {
 
        var list1 = document.getElementById('school');
 
    });  
    
    function getFaculty(){
 
            var list1 = document.getElementById('school');
            var list2 = document.getElementById("faculty");
            var list1SelectedValue = list1.options[list1.selectedIndex].value;
             
            if (list1SelectedValue=='Singapore Polytechnic')
            {
                 
                list2.options.length=0;
                list2.options[0] = new Option('Select', '');
                list2.options[1] = new Option('School of Architecture & Environment', 'School of Architecture & Environment');
                list2.options[2] = new Option('School of Business', 'School of Business');
                list2.options[3] = new Option('School of Chemical Life Sciences', 'School of Chemical Life Sciences');
                list2.options[4] = new Option('School of Computing', 'School of Computing');
                list2.options[5] = new Option('School of Electrical Engineering', 'School of Electrical Engineering');
                list2.options[6] = new Option('School of Life Skills & Communication', 'School of Life Skills & Communication');
                list2.options[7] = new Option('Media Arts & Design School', 'Media Arts & Design School');
                list2.options[8] = new Option('School of Mathematics & Science', 'School of Mathematics & Science');
                list2.options[9] = new Option('PACE Academy', 'PACE Academy');
                list2.options[10] = new Option('Singapore Maritime Academy', 'Singapore Maritime Academy');

                 
            }
            else if (list1SelectedValue=='Nanyang Polytechnic')
            {
                 
                list2.options.length=0;
                list2.options[0] = new Option('Select', '');
                list2.options[1] = new Option('School of Business Management', 'School of Business Management');
                list2.options[2] = new Option('School of Chemical Life Sciences', 'School of Chemical Life Sciences');
                list2.options[3] = new Option('School of Design', 'School of Design');
                list2.options[4] = new Option('School of Engineering', 'School of Engineering');
                list2.options[5] = new Option('School of Health & Social Sciences', 'School of Health & Social Sciences');
                list2.options[6] = new Option('School of Interactive Digital Media', 'School of Interactive Digital Media');
                list2.options[7] = new Option('School of Information Technology', 'School of Information Technology');
                 
            }
            else if (list1SelectedValue=='Temasek Polytechnic')
            {
                 
                list2.options.length=0;
                list2.options[0] = new Option('Select', '');
                list2.options[1] = new Option('School of Applied Science', 'School of Applied Science');
                list2.options[2] = new Option('School of Business', 'School of Business');
                list2.options[3] = new Option('School of Engineering', 'School of Engineering');
                list2.options[4] = new Option('School of Humanities & Social Sciences', 'School of Humanities & Social Sciences');
                list2.options[5] = new Option('School of Informatics & IT', 'School of Informatics & IT');
                list2.options[6] = new Option('School of Design', 'School of Design');
                 
            }
            else if (list1SelectedValue=='NgeeAnn Polytechnic')
            {
                 
                list2.options.length=0;
                list2.options[0] = new Option('Select', '');
                list2.options[1] = new Option('School of Business & Accountancy', 'School of Business & Accountancy');
                list2.options[2] = new Option('School of Design & Environment', 'School of Design & Environment');
                list2.options[3] = new Option('School of Engineering', 'School of Engineering');
                list2.options[4] = new Option('School of Film & Media Studies', 'School of Film & Media Studies');
                list2.options[5] = new Option('School of Health Sciences', 'School of Health Sciences');
                list2.options[6] = new Option('School of Humanities & Social Sciences', 'School of Humanities & Social Sciences');
                list2.options[7] = new Option('School of InfoComm Technology', 'School of InfoComm Technology');
                list2.options[8] = new Option('School of Life Sciences & Chemical ', 'School of Life Sciences & Chemical ');
                 
            }
            else if (list1SelectedValue=='Republic Polytechnic')
            {
                 
                list2.options.length=0;
                list2.options[0] = new Option('Select', '');
                list2.options[1] = new Option('School of Applied Science', 'School of Applied Science');
                list2.options[2] = new Option('School of Engineering', 'School of Engineering');
                list2.options[3] = new Option('School of Hospitality', 'School of Hospitality');
                list2.options[4] = new Option('School of Infocomm', 'School of Infocomm');
                list2.options[5] = new Option('School of Management and Communication', 'School of Management and Communication');
                list2.options[6] = new Option('School of Sports,Health & Leisure', 'School of Sports,Health & Leisure');
                list2.options[7] = new Option('School of Technology for Arts', 'School of Technology for Arts');
                 
            }
    
    }
		$('[data-toggle=confirmation]').confirmation({
			rootSelector: '[data-toggle=confirmation]',
		});
	</script>
   
</body>

</html>